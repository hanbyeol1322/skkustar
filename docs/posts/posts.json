[
  {
    "path": "posts/2021-03-25-hw4/",
    "title": "saleprice prediction 수정(tidymodels)",
    "description": "응용통계학 hw4",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-25",
    "categories": [],
    "contents": "\n\nContents\n1. Preparations (준비작업)\n1.1 Libraries\n1.2 Data load\n\n2. Data overview (데이터 기본정보)\n2.1 Basic info.\n2.2 Detailed info. train\n2.3 Detailed info. test\n\n3. EDA with visualization (탐색적 데이터 분석)\n3.1 Distribution of sale_price\n3.2 NAs\n\n4. Preprecessing with recipe (전처리 레시피 만들기)\n4.1 all_data combine and name cleaning with janitor\n4.2 Make recipe\n4.3 juice the all_data2 and split\n\n5. Set linear regression model and fitting (모델 설정 및 학습)\n6. Prediction and submit (예측 및 평가)\n\n1. Preparations (준비작업)\n1.1 Libraries\nWe mainly exploits the functions from the tidyvers and tidymodels packages. magrittr has my favorite operators!\n\n\ncode\n\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(skimr)\nlibrary(knitr)\ntheme_set(theme_bw())\n\n\n\n1.2 Data load\nlist.files(): 지금 있는 파일이 뭐니?\n\n\ncode\n\nfile_path <- \"/cloud/project\"\nfiles <- list.files(file_path)\nfiles\n\n\n [1] \"_posts\"                \"_site.yml\"            \n [3] \"about.Rmd\"             \"blog_posts.Rmd\"       \n [5] \"docs\"                  \"index.Rmd\"            \n [7] \"Portfolio.Rmd\"         \"postcard.R\"           \n [9] \"project.Rproj\"         \"README.md\"            \n[11] \"sample_submission.csv\" \"test.csv\"             \n[13] \"tobi.jpg\"              \"train.csv\"            \n[15] \"프사.jpg\"             \n\ncsv파일 불러오기\n\n\ncode\n\ntrain <- read_csv(file.path(file_path, \"train.csv\"))\ntest <- read_csv(file.path(file_path, \"test.csv\"))\n\n\n\n2. Data overview (데이터 기본정보)\n2.1 Basic info.\nHere is the basic information about train and test. We have approximately the same sample size for the train and test set. The number of columns in the train is 81 and the one in the test is 80.\n\n\ncode\n\ndim(train)\n\n\n[1] 1460   81\n\ncode\n\ndim(test)\n\n\n[1] 1459   80\n\nWe can see train doesn’t have the target variable SalePrice.\n\n\ncode\n\n\"SalePrice\" %in% names(test)\n\n\n[1] FALSE\n\n2.2 Detailed info. train\n\n\ncode\n\nskim(train)\n\n\nTable 1: Data summary\nName\ntrain\nNumber of rows\n1460\nNumber of columns\n81\n_______________________\n\nColumn type frequency:\n\ncharacter\n43\nnumeric\n38\n________________________\n\nGroup variables\nNone\nVariable type: character\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\nMSZoning\n0\n1.00\n2\n7\n0\n5\n0\nStreet\n0\n1.00\n4\n4\n0\n2\n0\nAlley\n1369\n0.06\n4\n4\n0\n2\n0\nLotShape\n0\n1.00\n3\n3\n0\n4\n0\nLandContour\n0\n1.00\n3\n3\n0\n4\n0\nUtilities\n0\n1.00\n6\n6\n0\n2\n0\nLotConfig\n0\n1.00\n3\n7\n0\n5\n0\nLandSlope\n0\n1.00\n3\n3\n0\n3\n0\nNeighborhood\n0\n1.00\n5\n7\n0\n25\n0\nCondition1\n0\n1.00\n4\n6\n0\n9\n0\nCondition2\n0\n1.00\n4\n6\n0\n8\n0\nBldgType\n0\n1.00\n4\n6\n0\n5\n0\nHouseStyle\n0\n1.00\n4\n6\n0\n8\n0\nRoofStyle\n0\n1.00\n3\n7\n0\n6\n0\nRoofMatl\n0\n1.00\n4\n7\n0\n8\n0\nExterior1st\n0\n1.00\n5\n7\n0\n15\n0\nExterior2nd\n0\n1.00\n5\n7\n0\n16\n0\nMasVnrType\n8\n0.99\n4\n7\n0\n4\n0\nExterQual\n0\n1.00\n2\n2\n0\n4\n0\nExterCond\n0\n1.00\n2\n2\n0\n5\n0\nFoundation\n0\n1.00\n4\n6\n0\n6\n0\nBsmtQual\n37\n0.97\n2\n2\n0\n4\n0\nBsmtCond\n37\n0.97\n2\n2\n0\n4\n0\nBsmtExposure\n38\n0.97\n2\n2\n0\n4\n0\nBsmtFinType1\n37\n0.97\n3\n3\n0\n6\n0\nBsmtFinType2\n38\n0.97\n3\n3\n0\n6\n0\nHeating\n0\n1.00\n4\n5\n0\n6\n0\nHeatingQC\n0\n1.00\n2\n2\n0\n5\n0\nCentralAir\n0\n1.00\n1\n1\n0\n2\n0\nElectrical\n1\n1.00\n3\n5\n0\n5\n0\nKitchenQual\n0\n1.00\n2\n2\n0\n4\n0\nFunctional\n0\n1.00\n3\n4\n0\n7\n0\nFireplaceQu\n690\n0.53\n2\n2\n0\n5\n0\nGarageType\n81\n0.94\n6\n7\n0\n6\n0\nGarageFinish\n81\n0.94\n3\n3\n0\n3\n0\nGarageQual\n81\n0.94\n2\n2\n0\n5\n0\nGarageCond\n81\n0.94\n2\n2\n0\n5\n0\nPavedDrive\n0\n1.00\n1\n1\n0\n3\n0\nPoolQC\n1453\n0.00\n2\n2\n0\n3\n0\nFence\n1179\n0.19\n4\n5\n0\n4\n0\nMiscFeature\n1406\n0.04\n4\n4\n0\n4\n0\nSaleType\n0\n1.00\n2\n5\n0\n9\n0\nSaleCondition\n0\n1.00\n6\n7\n0\n6\n0\nVariable type: numeric\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nId\n0\n1.00\n730.50\n421.61\n1\n365.75\n730.5\n1095.25\n1460\n▇▇▇▇▇\nMSSubClass\n0\n1.00\n56.90\n42.30\n20\n20.00\n50.0\n70.00\n190\n▇▅▂▁▁\nLotFrontage\n259\n0.82\n70.05\n24.28\n21\n59.00\n69.0\n80.00\n313\n▇▃▁▁▁\nLotArea\n0\n1.00\n10516.83\n9981.26\n1300\n7553.50\n9478.5\n11601.50\n215245\n▇▁▁▁▁\nOverallQual\n0\n1.00\n6.10\n1.38\n1\n5.00\n6.0\n7.00\n10\n▁▂▇▅▁\nOverallCond\n0\n1.00\n5.58\n1.11\n1\n5.00\n5.0\n6.00\n9\n▁▁▇▅▁\nYearBuilt\n0\n1.00\n1971.27\n30.20\n1872\n1954.00\n1973.0\n2000.00\n2010\n▁▂▃▆▇\nYearRemodAdd\n0\n1.00\n1984.87\n20.65\n1950\n1967.00\n1994.0\n2004.00\n2010\n▅▂▂▃▇\nMasVnrArea\n8\n0.99\n103.69\n181.07\n0\n0.00\n0.0\n166.00\n1600\n▇▁▁▁▁\nBsmtFinSF1\n0\n1.00\n443.64\n456.10\n0\n0.00\n383.5\n712.25\n5644\n▇▁▁▁▁\nBsmtFinSF2\n0\n1.00\n46.55\n161.32\n0\n0.00\n0.0\n0.00\n1474\n▇▁▁▁▁\nBsmtUnfSF\n0\n1.00\n567.24\n441.87\n0\n223.00\n477.5\n808.00\n2336\n▇▅▂▁▁\nTotalBsmtSF\n0\n1.00\n1057.43\n438.71\n0\n795.75\n991.5\n1298.25\n6110\n▇▃▁▁▁\n1stFlrSF\n0\n1.00\n1162.63\n386.59\n334\n882.00\n1087.0\n1391.25\n4692\n▇▅▁▁▁\n2ndFlrSF\n0\n1.00\n346.99\n436.53\n0\n0.00\n0.0\n728.00\n2065\n▇▃▂▁▁\nLowQualFinSF\n0\n1.00\n5.84\n48.62\n0\n0.00\n0.0\n0.00\n572\n▇▁▁▁▁\nGrLivArea\n0\n1.00\n1515.46\n525.48\n334\n1129.50\n1464.0\n1776.75\n5642\n▇▇▁▁▁\nBsmtFullBath\n0\n1.00\n0.43\n0.52\n0\n0.00\n0.0\n1.00\n3\n▇▆▁▁▁\nBsmtHalfBath\n0\n1.00\n0.06\n0.24\n0\n0.00\n0.0\n0.00\n2\n▇▁▁▁▁\nFullBath\n0\n1.00\n1.57\n0.55\n0\n1.00\n2.0\n2.00\n3\n▁▇▁▇▁\nHalfBath\n0\n1.00\n0.38\n0.50\n0\n0.00\n0.0\n1.00\n2\n▇▁▅▁▁\nBedroomAbvGr\n0\n1.00\n2.87\n0.82\n0\n2.00\n3.0\n3.00\n8\n▁▇▂▁▁\nKitchenAbvGr\n0\n1.00\n1.05\n0.22\n0\n1.00\n1.0\n1.00\n3\n▁▇▁▁▁\nTotRmsAbvGrd\n0\n1.00\n6.52\n1.63\n2\n5.00\n6.0\n7.00\n14\n▂▇▇▁▁\nFireplaces\n0\n1.00\n0.61\n0.64\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▁▁\nGarageYrBlt\n81\n0.94\n1978.51\n24.69\n1900\n1961.00\n1980.0\n2002.00\n2010\n▁▁▅▅▇\nGarageCars\n0\n1.00\n1.77\n0.75\n0\n1.00\n2.0\n2.00\n4\n▁▃▇▂▁\nGarageArea\n0\n1.00\n472.98\n213.80\n0\n334.50\n480.0\n576.00\n1418\n▂▇▃▁▁\nWoodDeckSF\n0\n1.00\n94.24\n125.34\n0\n0.00\n0.0\n168.00\n857\n▇▂▁▁▁\nOpenPorchSF\n0\n1.00\n46.66\n66.26\n0\n0.00\n25.0\n68.00\n547\n▇▁▁▁▁\nEnclosedPorch\n0\n1.00\n21.95\n61.12\n0\n0.00\n0.0\n0.00\n552\n▇▁▁▁▁\n3SsnPorch\n0\n1.00\n3.41\n29.32\n0\n0.00\n0.0\n0.00\n508\n▇▁▁▁▁\nScreenPorch\n0\n1.00\n15.06\n55.76\n0\n0.00\n0.0\n0.00\n480\n▇▁▁▁▁\nPoolArea\n0\n1.00\n2.76\n40.18\n0\n0.00\n0.0\n0.00\n738\n▇▁▁▁▁\nMiscVal\n0\n1.00\n43.49\n496.12\n0\n0.00\n0.0\n0.00\n15500\n▇▁▁▁▁\nMoSold\n0\n1.00\n6.32\n2.70\n1\n5.00\n6.0\n8.00\n12\n▃▆▇▃▃\nYrSold\n0\n1.00\n2007.82\n1.33\n2006\n2007.00\n2008.0\n2009.00\n2010\n▇▇▇▇▅\nSalePrice\n0\n1.00\n180921.20\n79442.50\n34900\n129975.00\n163000.0\n214000.00\n755000\n▇▅▁▁▁\n\n2.3 Detailed info. test\n\n\ncode\n\nskim(test)\n\n\nTable 2: Data summary\nName\ntest\nNumber of rows\n1459\nNumber of columns\n80\n_______________________\n\nColumn type frequency:\n\ncharacter\n43\nnumeric\n37\n________________________\n\nGroup variables\nNone\nVariable type: character\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\nMSZoning\n4\n1.00\n2\n7\n0\n5\n0\nStreet\n0\n1.00\n4\n4\n0\n2\n0\nAlley\n1352\n0.07\n4\n4\n0\n2\n0\nLotShape\n0\n1.00\n3\n3\n0\n4\n0\nLandContour\n0\n1.00\n3\n3\n0\n4\n0\nUtilities\n2\n1.00\n6\n6\n0\n1\n0\nLotConfig\n0\n1.00\n3\n7\n0\n5\n0\nLandSlope\n0\n1.00\n3\n3\n0\n3\n0\nNeighborhood\n0\n1.00\n5\n7\n0\n25\n0\nCondition1\n0\n1.00\n4\n6\n0\n9\n0\nCondition2\n0\n1.00\n4\n6\n0\n5\n0\nBldgType\n0\n1.00\n4\n6\n0\n5\n0\nHouseStyle\n0\n1.00\n4\n6\n0\n7\n0\nRoofStyle\n0\n1.00\n3\n7\n0\n6\n0\nRoofMatl\n0\n1.00\n7\n7\n0\n4\n0\nExterior1st\n1\n1.00\n6\n7\n0\n13\n0\nExterior2nd\n1\n1.00\n5\n7\n0\n15\n0\nMasVnrType\n16\n0.99\n4\n7\n0\n4\n0\nExterQual\n0\n1.00\n2\n2\n0\n4\n0\nExterCond\n0\n1.00\n2\n2\n0\n5\n0\nFoundation\n0\n1.00\n4\n6\n0\n6\n0\nBsmtQual\n44\n0.97\n2\n2\n0\n4\n0\nBsmtCond\n45\n0.97\n2\n2\n0\n4\n0\nBsmtExposure\n44\n0.97\n2\n2\n0\n4\n0\nBsmtFinType1\n42\n0.97\n3\n3\n0\n6\n0\nBsmtFinType2\n42\n0.97\n3\n3\n0\n6\n0\nHeating\n0\n1.00\n4\n4\n0\n4\n0\nHeatingQC\n0\n1.00\n2\n2\n0\n5\n0\nCentralAir\n0\n1.00\n1\n1\n0\n2\n0\nElectrical\n0\n1.00\n5\n5\n0\n4\n0\nKitchenQual\n1\n1.00\n2\n2\n0\n4\n0\nFunctional\n2\n1.00\n3\n4\n0\n7\n0\nFireplaceQu\n730\n0.50\n2\n2\n0\n5\n0\nGarageType\n76\n0.95\n6\n7\n0\n6\n0\nGarageFinish\n78\n0.95\n3\n3\n0\n3\n0\nGarageQual\n78\n0.95\n2\n2\n0\n4\n0\nGarageCond\n78\n0.95\n2\n2\n0\n5\n0\nPavedDrive\n0\n1.00\n1\n1\n0\n3\n0\nPoolQC\n1456\n0.00\n2\n2\n0\n2\n0\nFence\n1169\n0.20\n4\n5\n0\n4\n0\nMiscFeature\n1408\n0.03\n4\n4\n0\n3\n0\nSaleType\n1\n1.00\n2\n5\n0\n9\n0\nSaleCondition\n0\n1.00\n6\n7\n0\n6\n0\nVariable type: numeric\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nId\n0\n1.00\n2190.00\n421.32\n1461\n1825.50\n2190.0\n2554.50\n2919\n▇▇▇▇▇\nMSSubClass\n0\n1.00\n57.38\n42.75\n20\n20.00\n50.0\n70.00\n190\n▇▅▂▁▁\nLotFrontage\n227\n0.84\n68.58\n22.38\n21\n58.00\n67.0\n80.00\n200\n▃▇▁▁▁\nLotArea\n0\n1.00\n9819.16\n4955.52\n1470\n7391.00\n9399.0\n11517.50\n56600\n▇▂▁▁▁\nOverallQual\n0\n1.00\n6.08\n1.44\n1\n5.00\n6.0\n7.00\n10\n▁▁▇▅▁\nOverallCond\n0\n1.00\n5.55\n1.11\n1\n5.00\n5.0\n6.00\n9\n▁▁▇▅▁\nYearBuilt\n0\n1.00\n1971.36\n30.39\n1879\n1953.00\n1973.0\n2001.00\n2010\n▁▂▃▆▇\nYearRemodAdd\n0\n1.00\n1983.66\n21.13\n1950\n1963.00\n1992.0\n2004.00\n2010\n▅▂▂▃▇\nMasVnrArea\n15\n0.99\n100.71\n177.63\n0\n0.00\n0.0\n164.00\n1290\n▇▁▁▁▁\nBsmtFinSF1\n1\n1.00\n439.20\n455.27\n0\n0.00\n350.5\n753.50\n4010\n▇▂▁▁▁\nBsmtFinSF2\n1\n1.00\n52.62\n176.75\n0\n0.00\n0.0\n0.00\n1526\n▇▁▁▁▁\nBsmtUnfSF\n1\n1.00\n554.29\n437.26\n0\n219.25\n460.0\n797.75\n2140\n▇▆▂▁▁\nTotalBsmtSF\n1\n1.00\n1046.12\n442.90\n0\n784.00\n988.0\n1305.00\n5095\n▇▇▁▁▁\n1stFlrSF\n0\n1.00\n1156.53\n398.17\n407\n873.50\n1079.0\n1382.50\n5095\n▇▃▁▁▁\n2ndFlrSF\n0\n1.00\n325.97\n420.61\n0\n0.00\n0.0\n676.00\n1862\n▇▃▂▁▁\nLowQualFinSF\n0\n1.00\n3.54\n44.04\n0\n0.00\n0.0\n0.00\n1064\n▇▁▁▁▁\nGrLivArea\n0\n1.00\n1486.05\n485.57\n407\n1117.50\n1432.0\n1721.00\n5095\n▇▇▁▁▁\nBsmtFullBath\n2\n1.00\n0.43\n0.53\n0\n0.00\n0.0\n1.00\n3\n▇▆▁▁▁\nBsmtHalfBath\n2\n1.00\n0.07\n0.25\n0\n0.00\n0.0\n0.00\n2\n▇▁▁▁▁\nFullBath\n0\n1.00\n1.57\n0.56\n0\n1.00\n2.0\n2.00\n4\n▁▇▇▁▁\nHalfBath\n0\n1.00\n0.38\n0.50\n0\n0.00\n0.0\n1.00\n2\n▇▁▅▁▁\nBedroomAbvGr\n0\n1.00\n2.85\n0.83\n0\n2.00\n3.0\n3.00\n6\n▁▃▇▂▁\nKitchenAbvGr\n0\n1.00\n1.04\n0.21\n0\n1.00\n1.0\n1.00\n2\n▁▁▇▁▁\nTotRmsAbvGrd\n0\n1.00\n6.39\n1.51\n3\n5.00\n6.0\n7.00\n15\n▅▇▃▁▁\nFireplaces\n0\n1.00\n0.58\n0.65\n0\n0.00\n0.0\n1.00\n4\n▇▇▁▁▁\nGarageYrBlt\n78\n0.95\n1977.72\n26.43\n1895\n1959.00\n1979.0\n2002.00\n2207\n▂▇▁▁▁\nGarageCars\n1\n1.00\n1.77\n0.78\n0\n1.00\n2.0\n2.00\n5\n▅▇▂▁▁\nGarageArea\n1\n1.00\n472.77\n217.05\n0\n318.00\n480.0\n576.00\n1488\n▃▇▃▁▁\nWoodDeckSF\n0\n1.00\n93.17\n127.74\n0\n0.00\n0.0\n168.00\n1424\n▇▁▁▁▁\nOpenPorchSF\n0\n1.00\n48.31\n68.88\n0\n0.00\n28.0\n72.00\n742\n▇▁▁▁▁\nEnclosedPorch\n0\n1.00\n24.24\n67.23\n0\n0.00\n0.0\n0.00\n1012\n▇▁▁▁▁\n3SsnPorch\n0\n1.00\n1.79\n20.21\n0\n0.00\n0.0\n0.00\n360\n▇▁▁▁▁\nScreenPorch\n0\n1.00\n17.06\n56.61\n0\n0.00\n0.0\n0.00\n576\n▇▁▁▁▁\nPoolArea\n0\n1.00\n1.74\n30.49\n0\n0.00\n0.0\n0.00\n800\n▇▁▁▁▁\nMiscVal\n0\n1.00\n58.17\n630.81\n0\n0.00\n0.0\n0.00\n17000\n▇▁▁▁▁\nMoSold\n0\n1.00\n6.10\n2.72\n1\n4.00\n6.0\n8.00\n12\n▅▆▇▃▃\nYrSold\n0\n1.00\n2007.77\n1.30\n2006\n2007.00\n2008.0\n2009.00\n2010\n▇▇▇▇▃\n\n3. EDA with visualization (탐색적 데이터 분석)\n3.1 Distribution of sale_price\nIf we check out the distribution of the house price, it is little bit skewed to the right.\n\n\ncode\n\ntrain %>% \n  ggplot(aes(x = SalePrice)) +\n  geom_histogram()\n\n\n\n\nSince we want to build a linear regression assume that the noise follows the normal distribution, let us take a log to SalePrice variable.\n한쪽으로 치우쳐져 있는 값에 log를 취한다.(y가 정규분포를 따른다는 가정하에서 회귀분석이 잘 된ㄷㅣ.)\n\n\ncode\n\ntrain %>% \n  ggplot(aes(x = log(SalePrice))) +\n  geom_histogram()\n\n\n\n\n3.2 NAs\nThere is a nice package for checking out NAs. Let’s see how many variables we have which contains NAs. in.na인 값들을 다 더하면-> 그 col안에 missing observation이 있는 값들을 선택해서 gg_miss_var 함수로표현\n\n\ncode\n\nlibrary(naniar)\ntrain %>% \n  # select_if(~sum(is.na(.)) > 0) %>% # alternative way\n  select(where(~sum(is.na(.)) > 0)) %>% \n  gg_miss_var()\n\n\n\n\nWe can do more analysis about NAs with upset() function, which shows that most of the observations with NAs in the data set have NAs at the PoolQC, MiscFeature, Alley, Fence at the same time. 동시에없는 정보들을 볼 수 있다. (NA의 연관성으로 전처리를 할 때 고려할 수있다.)\n\n\ncode\n\ntrain %>% \n  select(where(~sum(is.na(.)) > 0)) %>% \n  gg_miss_upset()\n\n\n\n\nFrom the above, we can have some insights that if a house doesn’t have Pool, it is likely that it doesn’t have Alley, Fence, and Fireplace too.\n4. Preprecessing with recipe (전처리 레시피 만들기)\nFirst, I would like to clean the variable names with janitor package so that we have consistent varible names.\n4.1 all_data combine and name cleaning with janitor\nbind_rows하는 이유: 두 자료에 동일한 전처리를 하기 위해서\n\n\ncode\n\nall_data <- bind_rows(train, test) %>% \n  janitor::clean_names()\nnames(all_data)[1:10]\n\n\n [1] \"id\"           \"ms_sub_class\" \"ms_zoning\"    \"lot_frontage\"\n [5] \"lot_area\"     \"street\"       \"alley\"        \"lot_shape\"   \n [9] \"land_contour\" \"utilities\"   \n\ncode\n\nall_data %>% dim()\n\n\n[1] 2919   81\n\n4.2 Make recipe\nNote that we will use mode imputation for nominal variables for the baseline, and the mean imputation for the numerical variables. However, this should be changed to build a more sensitive model because we have checked that the NA in the nominal variables indicates that cases where the house doesn’t have the corresponding attributes.\n\n\ncode\n\nhousing_recipe <- all_data %>% \n  recipe(sale_price ~ .) %>%\n  step_rm(id,pool_qc, misc_feature,alley,fence, fireplace_qu) %>% \n  step_log(sale_price) %>% \n  step_modeimpute(all_nominal()) %>% \n  step_dummy(all_nominal()) %>% \n  step_meanimpute(all_predictors()) %>%\n  step_normalize(all_predictors()) %>% \n  prep(training = all_data)\n\nprint(housing_recipe)\n\n\nData Recipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         80\n\nTraining data contained 2919 data points and 2919 incomplete rows. \n\nOperations:\n\nVariables removed id, pool_qc, misc_feature, alley, ... [trained]\nLog transformation on sale_price [trained]\nMode Imputation for ms_zoning, street, ... [trained]\nDummy variables from ms_zoning, street, lot_shape, ... [trained]\nMean Imputation for ms_sub_class, lot_frontage, ... [trained]\nCentering and scaling for ms_sub_class, lot_frontage, ... [trained]\n\nall_data로 모델링을 할거다\nrecipe(): target variable은 saleprice이고,나머지 변수들은 예측변수로 쓸거다\nstep_rm(): id는 제거를 해라(별 필요 없을 거 같아서)\nstep_log():saleprice에 log를 씌워라\nstep_modeimpute(): na를 채우는 방법(impute)은 가장 빈번하게 있는 것으로(mode) 채워라. norminal애들만(숫자들이 아닌거)\nstep_dummy(): (tidymodels 패키지에서는)카테고리 데이터에 더미코딩을 알아서 해줘(base: data.metrirx)\nstep_meanimputae():numerical애들은 그 na 제외한 col의 평균을 구해서 채워 넣어라\nstep_normalize(): 예측값을 정규화시킴: col들의 평균, 분산을 구해서 표준화를 시킨다.\nprep(): 위의 전처리 과정을 거친 all_data를 training data로 준비시켜라\n정규화를 시키는 이유: 값이 이동할 때 unit을 고려: 1달러=1000원으로 같은 효과를 주기 위해서\ntree계열로 할 때는 정규화 필요가 없는데, 어떤 기준값보다 큰지 작은지만 판단하기 때문이다!(추후 수업)\n4.3 juice the all_data2 and split\n전처리한 data를 다시 빼내서 all_data2로 가져와라잇 더미코딩을 해줬기 때문에 col의 수가 늘어난다.\n\n\ncode\n\nall_data2 <- juice(housing_recipe)\nall_data2 %>% dim()\n\n\n[1] 2919  233\n\nWe are done for preprocessing. Let’s split the data set.\n전처리가 끝났으면 다시 train이랑 test로 분리시킴. 왜냐하면 train으로 학습하고 test로 예측할것이기 때문에\n\n\ncode\n\ntrain_index <- seq_len(nrow(train))\ntrain2 <- all_data2[train_index,]\ntest2 <- all_data2[-train_index,]\n\n\n\n\n\ncode\n\ntrain2 %>% \n  head() %>% \n  kable()\n\n\nms_sub_class\nlot_frontage\nlot_area\noverall_qual\noverall_cond\nyear_built\nyear_remod_add\nmas_vnr_area\nbsmt_fin_sf1\nbsmt_fin_sf2\nbsmt_unf_sf\ntotal_bsmt_sf\nx1st_flr_sf\nx2nd_flr_sf\nlow_qual_fin_sf\ngr_liv_area\nbsmt_full_bath\nbsmt_half_bath\nfull_bath\nhalf_bath\nbedroom_abv_gr\nkitchen_abv_gr\ntot_rms_abv_grd\nfireplaces\ngarage_yr_blt\ngarage_cars\ngarage_area\nwood_deck_sf\nopen_porch_sf\nenclosed_porch\nx3ssn_porch\nscreen_porch\npool_area\nmisc_val\nmo_sold\nyr_sold\nsale_price\nms_zoning_FV\nms_zoning_RH\nms_zoning_RL\nms_zoning_RM\nstreet_Pave\nlot_shape_IR2\nlot_shape_IR3\nlot_shape_Reg\nland_contour_HLS\nland_contour_Low\nland_contour_Lvl\nutilities_NoSeWa\nlot_config_CulDSac\nlot_config_FR2\nlot_config_FR3\nlot_config_Inside\nland_slope_Mod\nland_slope_Sev\nneighborhood_Blueste\nneighborhood_BrDale\nneighborhood_BrkSide\nneighborhood_ClearCr\nneighborhood_CollgCr\nneighborhood_Crawfor\nneighborhood_Edwards\nneighborhood_Gilbert\nneighborhood_IDOTRR\nneighborhood_MeadowV\nneighborhood_Mitchel\nneighborhood_NAmes\nneighborhood_NoRidge\nneighborhood_NPkVill\nneighborhood_NridgHt\nneighborhood_NWAmes\nneighborhood_OldTown\nneighborhood_Sawyer\nneighborhood_SawyerW\nneighborhood_Somerst\nneighborhood_StoneBr\nneighborhood_SWISU\nneighborhood_Timber\nneighborhood_Veenker\ncondition1_Feedr\ncondition1_Norm\ncondition1_PosA\ncondition1_PosN\ncondition1_RRAe\ncondition1_RRAn\ncondition1_RRNe\ncondition1_RRNn\ncondition2_Feedr\ncondition2_Norm\ncondition2_PosA\ncondition2_PosN\ncondition2_RRAe\ncondition2_RRAn\ncondition2_RRNn\nbldg_type_X2fmCon\nbldg_type_Duplex\nbldg_type_Twnhs\nbldg_type_TwnhsE\nhouse_style_X1.5Unf\nhouse_style_X1Story\nhouse_style_X2.5Fin\nhouse_style_X2.5Unf\nhouse_style_X2Story\nhouse_style_SFoyer\nhouse_style_SLvl\nroof_style_Gable\nroof_style_Gambrel\nroof_style_Hip\nroof_style_Mansard\nroof_style_Shed\nroof_matl_CompShg\nroof_matl_Membran\nroof_matl_Metal\nroof_matl_Roll\nroof_matl_Tar.Grv\nroof_matl_WdShake\nroof_matl_WdShngl\nexterior1st_AsphShn\nexterior1st_BrkComm\nexterior1st_BrkFace\nexterior1st_CBlock\nexterior1st_CemntBd\nexterior1st_HdBoard\nexterior1st_ImStucc\nexterior1st_MetalSd\nexterior1st_Plywood\nexterior1st_Stone\nexterior1st_Stucco\nexterior1st_VinylSd\nexterior1st_Wd.Sdng\nexterior1st_WdShing\nexterior2nd_AsphShn\nexterior2nd_Brk.Cmn\nexterior2nd_BrkFace\nexterior2nd_CBlock\nexterior2nd_CmentBd\nexterior2nd_HdBoard\nexterior2nd_ImStucc\nexterior2nd_MetalSd\nexterior2nd_Other\nexterior2nd_Plywood\nexterior2nd_Stone\nexterior2nd_Stucco\nexterior2nd_VinylSd\nexterior2nd_Wd.Sdng\nexterior2nd_Wd.Shng\nmas_vnr_type_BrkFace\nmas_vnr_type_None\nmas_vnr_type_Stone\nexter_qual_Fa\nexter_qual_Gd\nexter_qual_TA\nexter_cond_Fa\nexter_cond_Gd\nexter_cond_Po\nexter_cond_TA\nfoundation_CBlock\nfoundation_PConc\nfoundation_Slab\nfoundation_Stone\nfoundation_Wood\nbsmt_qual_Fa\nbsmt_qual_Gd\nbsmt_qual_TA\nbsmt_cond_Gd\nbsmt_cond_Po\nbsmt_cond_TA\nbsmt_exposure_Gd\nbsmt_exposure_Mn\nbsmt_exposure_No\nbsmt_fin_type1_BLQ\nbsmt_fin_type1_GLQ\nbsmt_fin_type1_LwQ\nbsmt_fin_type1_Rec\nbsmt_fin_type1_Unf\nbsmt_fin_type2_BLQ\nbsmt_fin_type2_GLQ\nbsmt_fin_type2_LwQ\nbsmt_fin_type2_Rec\nbsmt_fin_type2_Unf\nheating_GasA\nheating_GasW\nheating_Grav\nheating_OthW\nheating_Wall\nheating_qc_Fa\nheating_qc_Gd\nheating_qc_Po\nheating_qc_TA\ncentral_air_Y\nelectrical_FuseF\nelectrical_FuseP\nelectrical_Mix\nelectrical_SBrkr\nkitchen_qual_Fa\nkitchen_qual_Gd\nkitchen_qual_TA\nfunctional_Maj2\nfunctional_Min1\nfunctional_Min2\nfunctional_Mod\nfunctional_Sev\nfunctional_Typ\ngarage_type_Attchd\ngarage_type_Basment\ngarage_type_BuiltIn\ngarage_type_CarPort\ngarage_type_Detchd\ngarage_finish_RFn\ngarage_finish_Unf\ngarage_qual_Fa\ngarage_qual_Gd\ngarage_qual_Po\ngarage_qual_TA\ngarage_cond_Fa\ngarage_cond_Gd\ngarage_cond_Po\ngarage_cond_TA\npaved_drive_P\npaved_drive_Y\nsale_type_Con\nsale_type_ConLD\nsale_type_ConLI\nsale_type_ConLw\nsale_type_CWD\nsale_type_New\nsale_type_Oth\nsale_type_WD\nsale_condition_AdjLand\nsale_condition_Alloca\nsale_condition_Family\nsale_condition_Normal\nsale_condition_Partial\n0.0673199\n-0.2020329\n-0.2178414\n0.6460727\n-0.5071973\n1.0460784\n0.8966793\n0.5251119\n0.5808073\n-0.2930798\n-0.9347024\n-0.4442517\n-0.7737285\n1.2071717\n-0.1011797\n0.4134764\n1.0868363\n-0.2498524\n0.781232\n1.2323877\n0.169898\n-0.2076629\n0.9866803\n-0.9241529\n1.0007573\n0.3064753\n0.3488399\n-0.7406335\n0.1999717\n-0.3595391\n-0.1033128\n-0.2858865\n-0.0631394\n-0.0895766\n-1.5519176\n0.1576185\n12.24769\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n0.7549859\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n-0.173155\n-0.0694091\n0.606934\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n3.1510604\n-0.1912176\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n-0.2015634\n-0.4229141\n-0.1578646\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n-0.0910347\n-0.2439421\n0.4030253\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n-1.0077380\n-0.0524143\n-0.0910347\n1.5318854\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n-0.4268461\n-0.2861546\n-0.0261802\n-0.1222546\n1.3580858\n-0.4047462\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n-0.4251627\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n1.3693865\n-0.3932108\n-0.1689125\n1.5231625\n-1.2373891\n-0.3053301\n-0.1101443\n1.4074569\n-1.2662447\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n-0.8562253\n1.1096078\n-0.130642\n-0.0614929\n-0.0414158\n-0.1762775\n1.1890784\n-0.9364133\n-0.2088138\n-0.0414158\n0.2931008\n-0.323096\n-0.2985775\n0.6852938\n-0.3185509\n1.5611942\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n-0.4402256\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n1.2391648\n-1.023047\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n0.7432834\n-0.1117261\n-0.2608328\n-0.0718576\n-0.6032363\n1.6119459\n-0.9526448\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n0.4638573\n-0.3026411\n-0.8734664\n0.5017845\n-0.0720317\n-0.0631737\n2.1879039\n0.1547375\n-0.3955364\n-0.5721522\n1.1779104\n-0.2930798\n-0.6297885\n0.4770294\n0.2610301\n-0.7848906\n-0.1011797\n-0.4718098\n-0.8195386\n3.8217640\n0.781232\n-0.7561915\n0.169898\n-0.2076629\n-0.2877090\n0.6235248\n-0.0849858\n0.3064753\n-0.0597822\n1.6146027\n-0.7027224\n-0.3595391\n-0.1033128\n-0.2858865\n-0.0631394\n-0.0895766\n-0.4468483\n-0.6028583\n12.10901\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n0.7549859\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n5.773193\n-0.0694091\n-1.647061\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n-0.3172448\n-0.1912176\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n-0.2015634\n-0.4229141\n-0.1578646\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n10.9810599\n4.0979294\n-2.4803837\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n0.9919814\n-0.0524143\n-0.0910347\n-0.6525667\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n2.3419622\n-0.2861546\n-0.0261802\n-0.1222546\n-0.7360782\n-0.4047462\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n2.3512352\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n-0.7300038\n-0.3932108\n-0.1689125\n-0.6563038\n0.8078764\n-0.3053301\n-0.1101443\n-0.7102579\n0.7894662\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n1.1675169\n-0.9009106\n-0.130642\n-0.0614929\n-0.0414158\n-0.1762775\n1.1890784\n-0.9364133\n-0.2088138\n-0.0414158\n0.2931008\n3.093995\n-0.2985775\n-1.4587283\n-0.3185509\n-0.6403159\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n-0.4402256\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n-0.8067187\n0.977137\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n0.7432834\n-0.1117261\n-0.2608328\n-0.0718576\n-0.6032363\n1.6119459\n-0.9526448\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n0.4638573\n-0.3026411\n0.0673199\n-0.0612694\n0.1371734\n0.6460727\n-0.5071973\n0.9800531\n0.8488195\n0.3347702\n0.0978563\n-0.2930798\n-0.2884670\n-0.2990251\n-0.6106138\n1.2351632\n-0.1011797\n0.5636589\n1.0868363\n-0.2498524\n0.781232\n1.2323877\n0.169898\n-0.2076629\n-0.2877090\n0.6235248\n0.9203319\n0.3064753\n0.6274459\n-0.7406335\n-0.0811953\n-0.3595391\n-0.1033128\n-0.2858865\n-0.0631394\n-0.0895766\n1.0265775\n0.1576185\n12.31717\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n-1.3240743\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n-0.173155\n-0.0694091\n0.606934\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n3.1510604\n-0.1912176\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n-0.2015634\n-0.4229141\n-0.1578646\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n-0.0910347\n-0.2439421\n0.4030253\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n-1.0077380\n-0.0524143\n-0.0910347\n1.5318854\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n-0.4268461\n-0.2861546\n-0.0261802\n-0.1222546\n1.3580858\n-0.4047462\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n-0.4251627\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n1.3693865\n-0.3932108\n-0.1689125\n1.5231625\n-1.2373891\n-0.3053301\n-0.1101443\n1.4074569\n-1.2662447\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n-0.8562253\n1.1096078\n-0.130642\n-0.0614929\n-0.0414158\n-0.1762775\n1.1890784\n-0.9364133\n-0.2088138\n-0.0414158\n0.2931008\n-0.323096\n3.3480662\n-1.4587283\n-0.3185509\n1.5611942\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n-0.4402256\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n1.2391648\n-1.023047\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n0.7432834\n-0.1117261\n-0.2608328\n-0.0718576\n-0.6032363\n1.6119459\n-0.9526448\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n0.4638573\n-0.3026411\n0.3025164\n-0.4366387\n-0.0783713\n0.6460727\n-0.5071973\n-1.8590326\n-0.6826955\n-0.5721522\n-0.4948563\n-0.2930798\n-0.0472664\n-0.6711682\n-0.5061185\n0.9785744\n-0.1011797\n0.4273090\n1.0868363\n-0.2498524\n-1.027187\n-0.7561915\n0.169898\n-0.2076629\n0.3494857\n0.6235248\n0.7996938\n1.6196836\n0.7853226\n-0.7406335\n-0.1847831\n3.8743031\n-0.1033128\n-0.2858865\n-0.0631394\n-0.0895766\n-1.5519176\n-1.3633351\n11.84940\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n-1.3240743\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n-0.173155\n-0.0694091\n-1.647061\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n-0.3172448\n5.2278523\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n-0.2015634\n-0.4229141\n-0.1578646\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n-0.0910347\n-0.2439421\n0.4030253\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n-1.0077380\n-0.0524143\n-0.0910347\n1.5318854\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n-0.4268461\n-0.2861546\n-0.0261802\n-0.1222546\n-0.7360782\n2.4698379\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n-0.4251627\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n-0.7300038\n-0.3932108\n5.9181952\n-0.6563038\n0.8078764\n-0.3053301\n-0.1101443\n-0.7102579\n0.7894662\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n-0.8562253\n-0.9009106\n-0.130642\n-0.0614929\n-0.0414158\n-0.1762775\n-0.8406993\n1.0675387\n4.7873140\n-0.0414158\n-3.4106271\n-0.323096\n-0.2985775\n0.6852938\n-0.3185509\n-0.6403159\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n2.2707842\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n1.2391648\n-1.023047\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n-1.3449209\n-0.1117261\n-0.2608328\n-0.0718576\n1.6571574\n-0.6201557\n1.0493496\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n-2.1550970\n-0.3026411\n0.0673199\n0.6894691\n0.5188142\n1.3553191\n-0.5071973\n0.9470405\n0.7530998\n1.3872480\n0.4688505\n-0.2930798\n-0.1610403\n0.2115370\n-0.0371639\n1.6713642\n-0.1011797\n1.3778060\n1.0868363\n-0.2498524\n0.781232\n1.2323877\n1.385418\n-0.2076629\n1.6238750\n0.6235248\n0.8801192\n1.6196836\n1.6861486\n0.7768341\n0.5403318\n-0.3595391\n-0.1033128\n-0.2858865\n-0.0631394\n-0.0895766\n2.1316468\n0.1576185\n12.42922\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n-1.3240743\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n5.773193\n-0.0694091\n-1.647061\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n-0.3172448\n-0.1912176\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n-0.2015634\n-0.4229141\n6.3323719\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n-0.0910347\n-0.2439421\n0.4030253\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n-1.0077380\n-0.0524143\n-0.0910347\n1.5318854\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n-0.4268461\n-0.2861546\n-0.0261802\n-0.1222546\n1.3580858\n-0.4047462\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n-0.4251627\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n1.3693865\n-0.3932108\n-0.1689125\n1.5231625\n-1.2373891\n-0.3053301\n-0.1101443\n1.4074569\n-1.2662447\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n-0.8562253\n1.1096078\n-0.130642\n-0.0614929\n-0.0414158\n-0.1762775\n1.1890784\n-0.9364133\n-0.2088138\n-0.0414158\n0.2931008\n-0.323096\n-0.2985775\n-1.4587283\n-0.3185509\n1.5611942\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n-0.4402256\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n1.2391648\n-1.023047\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n0.7432834\n-0.1117261\n-0.2608328\n-0.0718576\n-0.6032363\n1.6119459\n-0.9526448\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n0.4638573\n-0.3026411\n-0.1678767\n0.7363903\n0.5004295\n-0.7724201\n-0.5071973\n0.7159521\n0.5138006\n-0.5721522\n0.6378834\n-0.2930798\n-1.1303934\n-0.5804016\n-0.9266484\n0.5353755\n-0.1011797\n-0.2742013\n1.0868363\n-0.2498524\n-1.027187\n1.2323877\n-2.261142\n-0.2076629\n-0.9249036\n-0.9241529\n0.5986302\n0.3064753\n0.0330864\n-0.4244944\n-0.2587744\n-0.3595391\n12.6010642\n-0.2858865\n-0.0631394\n1.1441161\n1.3949339\n0.9180953\n11.87060\n-0.2235685\n-0.0947847\n0.5351371\n-0.4324394\n0.0642383\n-0.1634722\n-0.074227\n-1.3240743\n-0.2070212\n-0.1448419\n0.3365019\n-0.018509\n-0.2532614\n-0.173155\n-0.0694091\n0.606934\n-0.2114791\n-0.074227\n-0.0586211\n-0.1018855\n-0.1959779\n-0.1236896\n-0.3172448\n-0.1912176\n-0.2667738\n-0.2447291\n-0.1813765\n-0.1132868\n4.9595195\n-0.4229141\n-0.1578646\n-0.0891026\n-0.2455142\n-0.2167279\n-0.2985775\n-0.2335237\n-0.2114791\n-0.2578243\n-0.1333279\n-0.1292795\n-0.1590004\n-0.0910347\n-0.2439421\n0.4030253\n-0.0830456\n-0.1163487\n-0.0983967\n-0.1319913\n-0.0453765\n-0.0556033\n-0.0668728\n0.1018855\n-0.037037\n-0.037037\n-0.018509\n-0.018509\n-0.0261802\n-0.1472876\n-0.1969181\n-0.1843766\n-0.2903361\n-0.0809289\n-1.0077380\n-0.0524143\n-0.0910347\n-0.6525667\n-0.1710455\n-0.2141168\n0.5133674\n-0.087129\n-0.4822925\n-0.0614929\n-0.0414158\n0.1222546\n-0.018509\n-0.018509\n-0.018509\n-0.0891026\n-0.0556033\n-0.0490206\n-0.0261802\n-0.0453765\n-0.1752422\n-0.0261802\n-0.2123613\n-0.4223512\n-0.018509\n-0.4268461\n-0.2861546\n-0.0261802\n-0.1222546\n1.3580858\n-0.4047462\n-0.1398328\n-0.037037\n-0.087129\n-0.1279035\n-0.0320695\n-0.2123613\n-0.4018763\n-0.0718576\n-0.4251627\n-0.018509\n-0.3192027\n-0.0453765\n-0.1279035\n1.3693865\n-0.3932108\n-0.1689125\n-0.6563038\n0.8078764\n-0.3053301\n-0.1101443\n-0.7102579\n0.7894662\n-0.1532457\n-0.3377618\n-0.0320695\n0.3873845\n-0.8562253\n-0.9009106\n-0.130642\n-0.0614929\n24.1371155\n-0.1762775\n1.1890784\n-0.9364133\n-0.2088138\n-0.0414158\n0.2931008\n-0.323096\n-0.2985775\n0.6852938\n-0.3185509\n1.5611942\n-0.23596\n-0.3307969\n-0.683675\n-0.1544121\n-0.1085406\n-0.1752422\n-0.1931338\n0.3666433\n0.125109\n-0.0966069\n-0.0556033\n-0.0261802\n-0.0453765\n-0.1803668\n-0.4402256\n-0.0320695\n-0.6445724\n0.2682439\n-0.1319913\n-0.0524143\n-0.018509\n0.3039876\n-0.1567214\n-0.8067187\n0.977137\n-0.0556033\n-0.1508882\n-0.1567214\n-0.1101443\n-0.0261802\n0.2711665\n0.7432834\n-0.1117261\n-0.2608328\n-0.0718576\n-0.6032363\n-0.6201557\n1.0493496\n-0.2105938\n-0.0910347\n-0.0414158\n0.2375732\n-0.1612502\n-0.0718576\n-0.0694091\n0.1940858\n-0.1472876\n0.3243873\n-0.0414158\n-0.0947847\n-0.0556033\n-0.0524143\n-0.0642383\n-0.2985775\n-0.0490206\n0.3943712\n-0.0642383\n-0.0910347\n-0.1265135\n0.4638573\n-0.3026411\n\n5. Set linear regression model and fitting (모델 설정 및 학습)\nlinear regression을 할건데 그 엔진은 base에 있는 lm을 사용할 것이다.\n전처리를 시킨 train2를 이용해서 fit을 시킬거다 (fit하면 변수마다의 베타값이 나온다.)\n\n\ncode\n\nlm_model <- \n    linear_reg() %>% \n    set_engine(\"lm\")\n\nlm_form_fit <- \n    lm_model %>% \n    fit(sale_price ~ ., data = train2)\n\noptions(max.print = 10)\nprint(lm_form_fit)\n\n\nparsnip model object\n\nFit time:  90ms \n\nCall:\nstats::lm(formula = sale_price ~ ., data = data)\n\nCoefficients:\n   (Intercept)    ms_sub_class    lot_frontage        lot_area  \n     1.202e+01      -1.440e-02       6.146e-03       2.267e-02  \n  overall_qual    overall_cond      year_built  year_remod_add  \n     5.840e-02       3.983e-02       5.461e-02       1.708e-02  \n  mas_vnr_area    bsmt_fin_sf1  \n     1.801e-03       6.012e-02  \n [ reached getOption(\"max.print\") -- omitted 223 entries ]\n\n6. Prediction and submit (예측 및 평가)\n\n\ncode\n\nresult <- predict(lm_form_fit, test2)\nresult %>% head()\n\n\n# A tibble: 6 x 1\n  .pred\n  <dbl>\n1  11.7\n2  12.0\n3  12.1\n4  12.2\n5  12.2\n6  12.1\n\npredict는 lm_form_fit에 들어있는 학습한 내용을 가지고, saleprice가 없는 새로운 data인 test2를 집어넣어서 predict를 해라.\n\n\ncode\n\nsubmission <- read_csv(file.path(file_path, \"sample_submission.csv\"))\nsubmission$SalePrice <- exp(result$.pred)\nwrite.csv(submission, row.names = FALSE,\n          \"baseline_regression.csv\")\n\n\n\n얻은 결과는 submission 파일로 가서 saleprice column에 exp취해서 넣어라\n\n\n\n",
    "preview": "posts/2021-03-25-hw4/distill-preview.png",
    "last_modified": "2021-03-25T03:41:44+00:00",
    "input_file": "hw4.utf8.md",
    "preview_width": 960,
    "preview_height": 768
  },
  {
    "path": "posts/2021-03-18-saleprice-prediction/",
    "title": "saleprice prediction",
    "description": "응용통계학 hw3",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-18",
    "categories": [],
    "contents": "\n\nContents\nlibrary\n1. 데이터 불러오기\n2. 상관계수가 높은 변수 선택\n3. Linear Model사용\n4. outlier 없애기\n5. test data에 적용해서 집 값을 예측한다.\n6. 결과 값을 실제 값과 비교\n\nlibrary\n\n\ncode\n\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(reprex)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(magrittr)\nlibrary(xlsx)\nlibrary(corrplot)\n\n\n\n1. 데이터 불러오기\n\n\ncode\n\ntrain <- read_csv(\"/cloud/project/_posts/2021-03-18-saleprice-prediction/train.csv\")\ntest <- read_csv(\"/cloud/project/_posts/2021-03-18-saleprice-prediction/test.csv\")\n\ntrain_tb <- as_tibble(train)\n\n\n\n2. 상관계수가 높은 변수 선택\n\n\ncode\n\ntrain_num <- dplyr::select_if(train, is.numeric)\nnumericVars <- which(sapply(train, is.numeric))\ntrain_numVar <- train[, numericVars]\ncor_numVar <- cor(train_numVar, use='pairwise.complete.obs')\ncor_sorted <- as.matrix(sort(cor_numVar[, 'SalePrice'], decreasing = TRUE))\nCorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.5)))\ncor_numVar <- cor_numVar[CorHigh, CorHigh]\n\ncorrplot.mixed(cor_numVar, \n               tl.col = 'black',   \n               tl.pos = 'lt',      \n               number.cex = .7)    \n\n\n\n\nhw2에서 확인한 변수와 SalePrice와 높은 상관관계를 가진 4개 변수 선택\nOverallQual\nGrLivArea\nGarageArea\nYearBuilt\n3. Linear Model사용\n\n\ncode\n\nlm.fit = lm(SalePrice ~OverallQual + GrLivArea + GarageArea + YearBuilt, data = train_tb)\nsummary(lm.fit)\n\n\n\nCall:\nlm(formula = SalePrice ~ OverallQual + GrLivArea + GarageArea + \n    YearBuilt, data = train_tb)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-409387  -21263   -2265   17878  298574 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -8.238e+05  8.516e+04  -9.673   <2e-16 ***\nOverallQual  2.311e+04  1.162e+03  19.893   <2e-16 ***\nGrLivArea    5.570e+01  2.603e+00  21.397   <2e-16 ***\nGarageArea   5.760e+01  6.257e+00   9.206   <2e-16 ***\nYearBuilt    3.815e+02  4.476e+01   8.523   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 39630 on 1455 degrees of freedom\nMultiple R-squared:  0.7518,    Adjusted R-squared:  0.7512 \nF-statistic:  1102 on 4 and 1455 DF,  p-value: < 2.2e-16\n\ncode\n\nplot(lm.fit)\n\n\n\n\n4. outlier 없애기\n\n\ncode\n\nlm.fit = lm(SalePrice ~-1 + OverallQual + GrLivArea + GarageArea + YearBuilt, data = train_tb[-c(524, 692, 899, 1183, 1299),])\nsummary(lm.fit)\n\n\n\nCall:\nlm(formula = SalePrice ~ -1 + OverallQual + GrLivArea + GarageArea + \n    YearBuilt, data = train_tb[-c(524, 692, 899, 1183, 1299), \n    ])\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-131449  -20964   -1456   18407  214756 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \nOverallQual 27083.585    958.555   28.25   <2e-16 ***\nGrLivArea      51.462      2.412   21.34   <2e-16 ***\nGarageArea     79.145      5.521   14.34   <2e-16 ***\nYearBuilt     -50.563      2.318  -21.82   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 36480 on 1451 degrees of freedom\nMultiple R-squared:  0.9652,    Adjusted R-squared:  0.9651 \nF-statistic: 1.005e+04 on 4 and 1451 DF,  p-value: < 2.2e-16\n\ncode\n\nplot(lm.fit)\n\n\n\n\n5. test data에 적용해서 집 값을 예측한다.\n\n\ncode\n\npred <- predict(lm.fit, test, interval = \"confidence\")\nhead(pred)\n\n\n       fit      lwr      upr\n1 140150.1 135067.7 145232.4\n2 156585.7 154076.1 159095.4\n3 156423.6 153301.2 159546.0\n4 181220.3 179228.2 183212.5\n5 221866.3 217414.0 226318.6\n6 181723.3 179620.9 183825.8\n\n6. 결과 값을 실제 값과 비교\n\n\ncode\n\n# write.csv(pred, \"C:/Users/hanby/Documents/21as/new.csv\")\n\n\n\n\n\n\n",
    "preview": "posts/2021-03-18-saleprice-prediction/saleprice-prediction_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-03-25T02:12:55+00:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 768
  },
  {
    "path": "posts/2021-03-10-hw2/",
    "title": "AmesHousing",
    "description": "응용통계학 hw2",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-10",
    "categories": [],
    "contents": "\n\nContents\nlibrary\n1. Square Feet & Garage Area & Sale Price\n2. Heating QC & Year Built & Sale Price\n3. GasA & Kitchen Quality & Central Air Conditioning\n4. 결론\n\nlibrary\n\n\ncode\n\nlibrary(tidyverse)\nlibrary(AmesHousing)\nlibrary(ggplot2)\n\n\n\n1. Square Feet & Garage Area & Sale Price\n집 평수가 넓을수록 주차공간이 넓지 않을까?\n\n\ncode\n\nGC <- guide_legend(title = \"Garage Cars\", ncol = 7)\names_raw %>% \n  mutate(Square_Feet=`1st Flr SF`+`2nd Flr SF`) %>% \n  ggplot() + geom_point(aes(x=`Square_Feet`,y=`Garage Area`,color=as_factor(`Garage Cars`), alpha=0.3, size=`SalePrice`))+\n  scale_color_brewer(palette = \"Set1\", labels = c(\"0\", \"1\", \"2\", \"3\", \"4\",\"5\",\"NA\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = GC) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n1층과 2층 square feet를 더해서 집 평수를 계산하였다. 집 평수와 주차공간은 양의 관계를 보이며 차고에 자동차 수가 많아짐을 볼 수 있다. 또한 집 평수가 넓어질수록 집의 가격(point size)가 커짐을 확인 할 수 있다.\n2. Heating QC & Year Built & Sale Price\n난방시설이 잘 되어있을수록 집 값이 높지 않을까? 난방시설을 그룹화해서 평균 집 값을 보자!\n\nEx: Excellent\nGd: Good\nTA: Average/Typical\nFa: Fair\nPo: Poor\n\n\n\ncode\n\names_raw %>% \n  group_by(`Heating QC`) %>%\n  summarise(across(SalePrice,mean,na.rm=TRUE))\n\n\n# A tibble: 5 x 2\n  `Heating QC` SalePrice\n  <chr>            <dbl>\n1 Ex             216367.\n2 Fa             122950.\n3 Gd             156855.\n4 Po              69033.\n5 TA             138985.\n\n난방시설의 quality가 좋을수록 평균 집 가격이 높다는 것이 확인되었다.\n또한 집이 최신에 지어질 수록 난방시절이 좋을 것 같다고 생각하고 각 quality별로 지어진 가장 최근년도를 보았다.\n\n\ncode\n\names_raw %>% \n  group_by(`Heating QC`) %>%\n  summarise(across(`Year Built`,max,na.rm=TRUE))\n\n\n# A tibble: 5 x 2\n  `Heating QC` `Year Built`\n  <chr>               <int>\n1 Ex                   2010\n2 Fa                   1978\n3 Gd                   2009\n4 Po                   1952\n5 TA                   1992\n\n확인결과 최근에 지어질수록 난방시설이 좋아지고 집 가격이 올라갈 것이라고 생각하고, ggplot 을 이용하여 연도별 sale price에 대한 난방시설 그래프를 그려보았다.\n\n\ncode\n\nhqc <- guide_legend(title = \"Heating Quality and Condition\", nrow = 5)\names_raw %>% \n  group_by(`Heating QC`) %>%\n  ggplot(aes(x=`Year Built`,y=SalePrice)) + \n  geom_point(aes(color=as_factor(`Heating QC`),alpha=0.3))+\n  scale_color_brewer(palette = \"Set1\", labels = c(\"Fair\", \"Typical\", \"Excellent\", \"Good\", \"Poor\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = hqc) +\n  theme(legend.position = \"right\")\n\n\n\n\n위 그래프들을 난방 종류에 따라 나누어본다.\n\n\ncode\n\nhqc <- guide_legend(title = \"Heating Quality and Condition\", nrow = 5)\names_raw %>% \n  group_by(`Heating QC`) %>%\n  ggplot(aes(x=`Year Built`,y=SalePrice)) + \n  geom_point(aes(color=as_factor(`Heating QC`),alpha=0.3))+\n  scale_color_brewer(palette = \"Set1\",\n                     labels = c(\"Fair\", \"Typical\", \"Excellent\", \"Good\", \"Poor\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = hqc) +\n  theme(legend.position = \"right\") + facet_wrap(~`Heating`)\n\n\n\n\n난방 종류별로 나누어본 결과 난방시설이 Excellent(초록색점)인 것은 모두 GasA(Gas forced warm air furnace를 사용하고 있는 것을 알 수 있다. 또한 최근으로 갈수록 GasA Type의 집을 많이 짓는다는 것을 확인 할 수있다(색이 짙어짐). 그럼 AmesHousing dataset을 GasA인 것만 필터링하여 살펴 보자.\n3. GasA & Kitchen Quality & Central Air Conditioning\nGasA로 난방을 사용하는 집안의 다른 시설 보기.\n\n\ncode\n\names_raw %>% \n         filter(Heating==\"GasA\") %>% \n         ggplot(aes(x=`Kitchen Qual`,y=SalePrice,color=`Kitchen Qual`)) + \n  geom_boxplot()+\n  facet_wrap(~ `Central Air`)\n\n\n\n\n같은 난방시설(GasA)을 사용하는 주방시설의 Quality도 중앙 에어컨(? 중앙제어 난방이라고 이해했음..)이 아닌 개별로 에어컨을 사용할 수 있는 것이 같은 Kitchen Quality에서도 집 값이 높다는 것을 확인 할 수 있다.\n4. 결론\n집 평수가 넓어질수록 주차를 할 수 있는 공간이 넓어지며 차고의 자동차 갯수가 증가하고, 집 가격도 상승한다.\nHeating Quality가 좋은(Excellent)집은 모두 GasA type이며 최근으로 갈수록 GasA Type의 집을 많이 짓고 있다.\n같은 난방시설과 난방 유형을 가진 집에서도 중앙에어컨인 경우보다 개별적으로 조절할 수 있는 집의 가격이 더 높다.\n\n\n\n",
    "preview": "posts/2021-03-10-hw2/hw2_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-03-25T02:13:34+00:00",
    "input_file": {},
    "preview_width": 960,
    "preview_height": 768
  },
  {
    "path": "posts/2021-03-07-first-writing/",
    "title": "Chooser Option Payoff: r code",
    "description": "보험금융투자론",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-07",
    "categories": [],
    "contents": "\nchooser option pay-off R code\n1. chooser option factors\nS0 <- 100\nK <- 100\n\ns <- 1000\ninterval <- 500\n\nT_t <- 0.7/(interval)\nt <- 0.3\nr <-0.03\nsigma <- 0.5\nmu <- r-(0.5*sigma^2)\n\nset.seed(1234)\n2. random number\nrnd.num <- as.data.frame(matrix(rnorm(s*interval), nrow=s, ncol=interval))\n\n3. 누적 수익률 만들기\nxx <- as.data.frame(matrix(data=0, nrow=s, ncol=interval+1))\nfor ( i in 1:s){ for ( j in 1:interval){\nxx[i,j+1] <- xx[i,j] + (mu*(T_t)+(sigma*sqrt(T_t)*rnd.num[i,j]))  \n}\n}\n4. t시점에서 option의 가치\nresult <- matrix(NA, s, 1)\n\nfor (i in 1:s){\n    result[i,1] <- (max(0, S0*exp(xx[i,151])-K*exp(-r*0.7),max(0, K*exp(-r*0.7)-S0*exp(xx[i,151]))))\n  \n}\n\n\npayoff <- result\nST <- matrix(S0*exp(xx[,150]))\nplot(ST, payoff)\n\n\nmean(result[1:s,1])\n\n\nplot(x=seq(1,500,1), y=xx[999, 2:501], type=\"l\", xlab = \"interval\", ylab = \"Yield\", main = \"999th Stock Price\")\nplot(x <- sort(rnorm(47)), type = \"s\", main = \"plot(x, type = \\\"s\\\")\")\npoints(x, cex = .5, col = \"dark red\")\n5. 블랙숄즈 공식과 비교, t시점에서 option의 가치\nchooser_option <- function(s, k, r, T, t, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  d1_c <- (log(s/k)+(r+0.5*sigma^2)*t)/(sigma*sqrt(t))\n  d2_c <- d1_c-sigma*sqrt(t)\n  value <- s*pnorm(d1)-k*exp(-r*T)*pnorm(d2)-s*pnorm(-d1_c)+k*exp(-r*T)*pnorm(-d2_c)\n  return(value)\n}\n\nchooser_option(100, 100, 0.03, 1, 0.3, 0.2)\n참고: call\ncalloption <- function(s, k, r, T, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  value <- s*pnorm(d1)-k*exp(-r*T)*pnorm(d2)\n  return(value)\n  \n}\n\ncalloption(100, 100, 0.03, 1, 0.2)\n참고: put\nputoption <- function(s, k, r, T, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  value <- k*exp(-r*T)*pnorm(-d2)-s*pnorm(-d1)\n  return(value)\n  \n}\n\nputoption(100, 100, 0.03, 1, 0.2)\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-10T13:25:54+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-07-lec2/",
    "title": "ggplot2",
    "description": "응용통계학 lec2",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-07",
    "categories": [],
    "contents": "\n\nContents\n6가지 중요한 dplyr\n1. filter(): 특정 조건을 만족하는 것을 필터링\nQ.Adelie이거나 Gentoo이면서 bill lenth가 30에서 100 사이인 것은?\n\n2. select(): column을 기준으로하는 operator\n3. mutate(): 새로운 변수를 만들어 열을 추가 할 때\n4. arrange(): data를 정렬하는 함수, 기본은 오름차순\n5. summarize(): 기존의 값으로 새로운 변수를 만들어서 요약해서 보여줌\n6. across(): 여러개의 column에 같은 함수를 적용할 때(cf.col별로 새로운 변수를 만들었음)\n\n\n\n\ncode\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n\n\n6가지 중요한 dplyr\n1. filter(): 특정 조건을 만족하는 것을 필터링\n\n\ncode\n\n    penguins %>%\n        filter(species==\"Chinstrap\") %>% \n  head()\n\n\n# A tibble: 6 x 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>     <fct>           <dbl>         <dbl>             <int>\n1 Chinstrap Dream            46.5          17.9               192\n2 Chinstrap Dream            50            19.5               196\n3 Chinstrap Dream            51.3          19.2               193\n4 Chinstrap Dream            45.4          18.7               188\n5 Chinstrap Dream            52.7          19.8               197\n6 Chinstrap Dream            45.2          17.8               198\n# … with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\n\nand 조건\n\n\ncode\n\n    penguins %>%\n        filter(species==\"Chinstrap\",island==\"Dream\") %>% \n  head()\n\n\n# A tibble: 6 x 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>     <fct>           <dbl>         <dbl>             <int>\n1 Chinstrap Dream            46.5          17.9               192\n2 Chinstrap Dream            50            19.5               196\n3 Chinstrap Dream            51.3          19.2               193\n4 Chinstrap Dream            45.4          18.7               188\n5 Chinstrap Dream            52.7          19.8               197\n6 Chinstrap Dream            45.2          17.8               198\n# … with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\n\nlogical operator쓰면\n\n\ncode\n\n    penguins %>% \n        filter((species==\"Chinstrap\"|species==\"Adelie\")&island==\"dream\") %>% \n  head()\n\n\n# A tibble: 0 x 8\n# … with 8 variables: species <fct>, island <fct>,\n#   bill_length_mm <dbl>, bill_depth_mm <dbl>,\n#   flipper_length_mm <int>, body_mass_g <int>, sex <fct>, year <int>\n\nor조건\n\n\ncode\n\n    penguins %>%\n        filter(species %in% c(\"Chinstrap\",\"Adelie\"))\n\n\n# A tibble: 220 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\n   <fct>   <fct>              <dbl>         <dbl>             <int>\n 1 Adelie  Torgersen           39.1          18.7               181\n 2 Adelie  Torgersen           39.5          17.4               186\n 3 Adelie  Torgersen           40.3          18                 195\n 4 Adelie  Torgersen           NA            NA                  NA\n 5 Adelie  Torgersen           36.7          19.3               193\n 6 Adelie  Torgersen           39.3          20.6               190\n 7 Adelie  Torgersen           38.9          17.8               181\n 8 Adelie  Torgersen           39.2          19.6               195\n 9 Adelie  Torgersen           34.1          18.1               193\n10 Adelie  Torgersen           42            20.2               190\n# … with 210 more rows, and 3 more variables: body_mass_g <int>,\n#   sex <fct>, year <int>\n\ncode\n\n    penguins %>%\n        filter(species %in% c(\"Chinstrap\",\"Adelie\"),island==\"dream\") %>% \n      head()\n\n\n# A tibble: 0 x 8\n# … with 8 variables: species <fct>, island <fct>,\n#   bill_length_mm <dbl>, bill_depth_mm <dbl>,\n#   flipper_length_mm <int>, body_mass_g <int>, sex <fct>, year <int>\n\nQ.Adelie이거나 Gentoo이면서 bill lenth가 30에서 100 사이인 것은?\nA.filter사용시\n\n\ncode\n\n    penguins %>% \n        filter(species %in% c(\"Adelie\",\"Gentoo\"),\n               bill_length_mm>30 & bill_length_mm<100) %>% \n        nrow()\n\n\n[1] 274\n\n2. select(): column을 기준으로하는 operator\n\n\ncode\n\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        head()\n\n\n# A tibble: 6 x 3\n  species bill_length_mm bill_depth_mm\n  <fct>            <dbl>         <dbl>\n1 Adelie            39.1          18.7\n2 Adelie            39.5          17.4\n3 Adelie            40.3          18  \n4 Adelie            NA            NA  \n5 Adelie            36.7          19.3\n6 Adelie            39.3          20.6\n\n해당 열(species)을 제외하고 선택해줘\n\n\ncode\n\n    penguins %>% \n        select(-species) %>% \n        head()\n\n\n# A tibble: 6 x 7\n  island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>              <dbl>         <dbl>             <int>       <int>\n1 Torgersen           39.1          18.7               181        3750\n2 Torgersen           39.5          17.4               186        3800\n3 Torgersen           40.3          18                 195        3250\n4 Torgersen           NA            NA                  NA          NA\n5 Torgersen           36.7          19.3               193        3450\n6 Torgersen           39.3          20.6               190        3650\n# … with 2 more variables: sex <fct>, year <int>\n\n여러개의 연속적인 열을 선택해줘\n\n\ncode\n\n    penguins %>% \n        select(bill_length_mm:body_mass_g) %>% \n  head()\n\n\n# A tibble: 6 x 4\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n           <dbl>         <dbl>             <int>       <int>\n1           39.1          18.7               181        3750\n2           39.5          17.4               186        3800\n3           40.3          18                 195        3250\n4           NA            NA                  NA          NA\n5           36.7          19.3               193        3450\n6           39.3          20.6               190        3650\n\n특정조건을 만족시키는 열을 선택해줘\n\n\ncode\n\n    penguins %>% \n        select(ends_with(\"mm\")) %>% \n        names()\n\n\n[1] \"bill_length_mm\"    \"bill_depth_mm\"     \"flipper_length_mm\"\n\n내가 선택한 순서대로 선택해줘(선택한것빼고 나머지st)\n\n\ncode\n\n    penguins %>% \n        select(island,bill_length_mm,everything()) %>% \n        head()\n\n\n# A tibble: 6 x 8\n  island    bill_length_mm species bill_depth_mm flipper_length_mm\n  <fct>              <dbl> <fct>           <dbl>             <int>\n1 Torgersen           39.1 Adelie           18.7               181\n2 Torgersen           39.5 Adelie           17.4               186\n3 Torgersen           40.3 Adelie           18                 195\n4 Torgersen           NA   Adelie           NA                  NA\n5 Torgersen           36.7 Adelie           19.3               193\n6 Torgersen           39.3 Adelie           20.6               190\n# … with 3 more variables: body_mass_g <int>, sex <fct>, year <int>\n\n3. mutate(): 새로운 변수를 만들어 열을 추가 할 때\n\n\ncode\n\n   penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        mutate(bill_total=bill_length_mm + bill_depth_mm) %>% \n        head()\n\n\n# A tibble: 6 x 4\n  species bill_length_mm bill_depth_mm bill_total\n  <fct>            <dbl>         <dbl>      <dbl>\n1 Adelie            39.1          18.7       57.8\n2 Adelie            39.5          17.4       56.9\n3 Adelie            40.3          18         58.3\n4 Adelie            NA            NA         NA  \n5 Adelie            36.7          19.3       56  \n6 Adelie            39.3          20.6       59.9\n\n새로 만든 변수를 바로 쓸수도 있다!\n\n\ncode\n\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        mutate(bill_total=bill_length_mm + bill_depth_mm,\n               bill_average=bill_total/2) %>% \n        head()\n\n\n# A tibble: 6 x 5\n  species bill_length_mm bill_depth_mm bill_total bill_average\n  <fct>            <dbl>         <dbl>      <dbl>        <dbl>\n1 Adelie            39.1          18.7       57.8         28.9\n2 Adelie            39.5          17.4       56.9         28.4\n3 Adelie            40.3          18         58.3         29.2\n4 Adelie            NA            NA         NA           NA  \n5 Adelie            36.7          19.3       56           28  \n6 Adelie            39.3          20.6       59.9         30.0\n\ntransmutate(): 새롭게 만든 변수만 선택하고 나머지는 버림\n\n\ncode\n\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        transmute(bill_total=bill_length_mm + bill_depth_mm,\n                  bill_average=bill_total/2) %>% \n        head()\n\n\n# A tibble: 6 x 2\n  bill_total bill_average\n       <dbl>        <dbl>\n1       57.8         28.9\n2       56.9         28.4\n3       58.3         29.2\n4       NA           NA  \n5       56           28  \n6       59.9         30.0\n\n4. arrange(): data를 정렬하는 함수, 기본은 오름차순\n\n\ncode\n\npenguins %>%\n\nselect(species,bill_length_mm,bill_depth_mm) %>%\n\nmutate(bill_length_mm=ceiling(bill_length_mm),\n\nbill_depth_mm=ceiling(bill_depth_mm)) %>%\n\narrange(bill_length_mm)\n\n\n# A tibble: 344 x 3\n   species bill_length_mm bill_depth_mm\n   <fct>            <dbl>         <dbl>\n 1 Adelie              33            16\n 2 Adelie              34            19\n 3 Adelie              34            18\n 4 Adelie              34            17\n 5 Adelie              35            19\n 6 Adelie              35            22\n 7 Adelie              35            19\n 8 Adelie              35            18\n 9 Adelie              35            19\n10 Adelie              35            18\n# … with 334 more rows\n\nbill_length_mm이 겹치면 bill_depth_mm으로 정렬하라\n\n\ncode\n\npenguins %>%\n\nselect(species,bill_length_mm,bill_depth_mm) %>%\n\nmutate(bill_length_mm=ceiling(bill_length_mm),\n\nbill_depth_mm=ceiling(bill_depth_mm)) %>%\n\narrange(bill_length_mm,bill_depth_mm)\n\n\n# A tibble: 344 x 3\n   species bill_length_mm bill_depth_mm\n   <fct>            <dbl>         <dbl>\n 1 Adelie              33            16\n 2 Adelie              34            17\n 3 Adelie              34            18\n 4 Adelie              34            19\n 5 Adelie              35            18\n 6 Adelie              35            18\n 7 Adelie              35            18\n 8 Adelie              35            19\n 9 Adelie              35            19\n10 Adelie              35            19\n# … with 334 more rows\n\nbill_length_mm이 겹치면 bill_depth_mm으로 “내림차순”으로 정렬하라\n\n\ncode\n\npenguins %>%\n  select(species,bill_length_mm,bill_depth_mm) %>%\n  mutate(bill_length_mm=ceiling(bill_length_mm),bill_depth_mm=ceiling(bill_depth_mm)) %>%\n\n  arrange(bill_length_mm, desc(bill_depth_mm))\n\n\n# A tibble: 344 x 3\n   species bill_length_mm bill_depth_mm\n   <fct>            <dbl>         <dbl>\n 1 Adelie              33            16\n 2 Adelie              34            19\n 3 Adelie              34            18\n 4 Adelie              34            17\n 5 Adelie              35            22\n 6 Adelie              35            19\n 7 Adelie              35            19\n 8 Adelie              35            19\n 9 Adelie              35            18\n10 Adelie              35            18\n# … with 334 more rows\n\n5. summarize(): 기존의 값으로 새로운 변수를 만들어서 요약해서 보여줌\n\n\ncode\n\npenguins %>%\n\nsummarise(bill_length_mean = mean(bill_length_mm, na.rm = TRUE),\n\nbill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))\n\n\n# A tibble: 1 x 2\n  bill_length_mean bill_depth_mean\n             <dbl>           <dbl>\n1             43.9            17.2\n\n그룹을 만들어서 새로운 변수를 만들고 요약해서 보여줌\n\n\ncode\n\npenguins %>%\n\ngroup_by(species) %>%\n\nsummarise(bill_depth_mean=mean(bill_depth_mm,na.rm=TRUE),\n\nbill_length_mean=mean(bill_length_mm,na.rm=TRUE))\n\n\n# A tibble: 3 x 3\n  species   bill_depth_mean bill_length_mean\n  <fct>               <dbl>            <dbl>\n1 Adelie               18.3             38.8\n2 Chinstrap            18.4             48.8\n3 Gentoo               15.0             47.5\n\n6. across(): 여러개의 column에 같은 함수를 적용할 때(cf.col별로 새로운 변수를 만들었음)\nacross가 없을 때\n\n\ncode\n\npenguins %>%\n\ngroup_by(species) %>%\n\nsummarise(bill_depth_mean=mean(bill_depth_mm,na.rm=TRUE),\n\nbill_length_mean=mean(bill_length_mm,na.rm=TRUE),\n\nflipper_length_mean=mean(flipper_length_mm,na.rm=TRUE))\n\n\n# A tibble: 3 x 4\n  species   bill_depth_mean bill_length_mean flipper_length_mean\n  <fct>               <dbl>            <dbl>               <dbl>\n1 Adelie               18.3             38.8                190.\n2 Chinstrap            18.4             48.8                196.\n3 Gentoo               15.0             47.5                217.\n\nacross를 사용하면\n\n\ncode\n\npenguins %>%\n\ngroup_by(species) %>%\n\nsummarise(across(bill_length_mm:flipper_length_mm,mean,na.rm=TRUE))\n\n\n# A tibble: 3 x 4\n  species   bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>              <dbl>         <dbl>             <dbl>\n1 Adelie              38.8          18.3              190.\n2 Chinstrap           48.8          18.4              196.\n3 Gentoo              47.5          15.0              217.\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-25T02:14:32+00:00",
    "input_file": {}
  }
]
