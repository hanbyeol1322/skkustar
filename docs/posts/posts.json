[
  {
    "path": "posts/2021-03-10-hw2/",
    "title": "AmesHousing",
    "description": "응용통계학 hw2",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-10",
    "categories": [],
    "contents": "\n\n\nlibrary(tidyverse)\nlibrary(AmesHousing)\nlibrary(ggplot2)\n\n\n\n1. Square Feet & Garage Area\n집 평수가 넓을수록 주차공간이 넓지 않을까?\n\n\nGC <- guide_legend(title = \"Garage Cars\", ncol = 7)\names_raw %>% \n  mutate(Square_Feet=`1st Flr SF`+`2nd Flr SF`) %>% \n  ggplot() + geom_point(aes(x=`Square_Feet`,y=`Garage Area`,color=as_factor(`Garage Cars`), alpha=0.3, size=`SalePrice`))+\n  scale_color_brewer(palette = \"Set1\", labels = c(\"0\", \"1\", \"2\", \"3\", \"4\",\"5\",\"NA\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = GC) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n1층과 2층 square feet를 더해서 집 평수를 계산하였다. 집 평수와 주차공간은 양의 관계를 보이며 차고에 자동차 수가 많아짐을 볼 수 있다. 또한 집 평수가 넓어질수록 집의 가격(point size)가 커짐을 확인 할 수 있다.\n2. Heating QC\n난방시설이 잘 되어있을수록 집 값이 높지 않을까? 난방시설을 그룹화해서 평균 집 값을 보자!\n\nEx: Excellent\nGd: Good\nTA: Average/Typical\nFa: Fair\nPo: Poor\n\n\n\names_raw %>% \n  group_by(`Heating QC`) %>%\n  summarise(across(SalePrice,mean,na.rm=TRUE))\n\n\n# A tibble: 5 x 2\n  `Heating QC` SalePrice\n  <chr>            <dbl>\n1 Ex             216367.\n2 Fa             122950.\n3 Gd             156855.\n4 Po              69033.\n5 TA             138985.\n\n난방시설의 quality가 좋을수록 평균 집 가격이 높다는 것이 확인되었다.\n또한 집이 최신에 지어질 수록 난방시절이 좋을 것 같다고 생각하고 각 quality별로 지어진 가장 최근년도를 보았다.\n\n\names_raw %>% \n  group_by(`Heating QC`) %>%\n  summarise(across(`Year Built`,max,na.rm=TRUE))\n\n\n# A tibble: 5 x 2\n  `Heating QC` `Year Built`\n  <chr>               <int>\n1 Ex                   2010\n2 Fa                   1978\n3 Gd                   2009\n4 Po                   1952\n5 TA                   1992\n\n확인결과 최근에 지어질수록 난방시설이 좋아지고 집 가격이 올라갈 것이라고 생각하고, ggplot 을 이용하여 연도별 sale price에 대한 난방시설 그래프를 그려보았다.\n\n\nhqc <- guide_legend(title = \"Heating Quality and Condition\", nrow = 5)\names_raw %>% \n  group_by(`Heating QC`) %>%\n  ggplot(aes(x=`Year Built`,y=SalePrice)) + \n  geom_point(aes(color=as_factor(`Heating QC`),alpha=0.3))+\n  scale_color_brewer(palette = \"Set1\", labels = c(\"Fair\", \"Typical\", \"Excellent\", \"Good\", \"Poor\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = hqc) +\n  theme(legend.position = \"right\")\n\n\n\n\n위 그래프들을 난방 종류에 따라 나누어본다.\n\n\nhqc <- guide_legend(title = \"Heating Quality and Condition\", nrow = 5)\names_raw %>% \n  group_by(`Heating QC`) %>%\n  ggplot(aes(x=`Year Built`,y=SalePrice)) + \n  geom_point(aes(color=as_factor(`Heating QC`),alpha=0.3))+\n  scale_color_brewer(palette = \"Set1\",\n                     labels = c(\"Fair\", \"Typical\", \"Excellent\", \"Good\", \"Poor\"))+ \n  scale_alpha_identity(0.3) + \n  guides(color = hqc) +\n  theme(legend.position = \"right\") + facet_wrap(~`Heating`)\n\n\n\n\n난방 종류별로 나누어본 결과 난방시설이 Excellent(초록색점)인 것은 모두 GasA(Gas forced warm air furnace를 사용하고 있는 것을 알 수 있다. 그럼 AmesHousing dataset을 GasA인 것만 필터링하여 좀 더 살펴 보자.\n3. GasA & Roof Style\nGasA로 난방을 사용하는 집안의 다른 시설 보기. 같은 난방시설(GasA)을 사용하는 지붕의 형태가 Gable 또는 Hip인 것이 다른 것보다 많이 사용된다는 것을 확인 할 수 있음.\n\n\names_raw %>% \n  filter(Heating==\"GasA\") %>%\n  ggplot(aes(x=`Roof Style`, y=SalePrice)) + \n  geom_jitter()+\n  geom_boxplot(outlier.shape = NA)\n\n\n\n\n\n\n\n",
    "preview": "posts/2021-03-10-hw2/hw2_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-03-11T12:25:45+00:00",
    "input_file": "hw2.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-03-07-first-writing/",
    "title": "Chooser Option Payoff: r code",
    "description": "보험금융투자론",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-07",
    "categories": [],
    "contents": "\nchooser option pay-off R code\n1. chooser option factors\nS0 <- 100\nK <- 100\n\ns <- 1000\ninterval <- 500\n\nT_t <- 0.7/(interval)\nt <- 0.3\nr <-0.03\nsigma <- 0.5\nmu <- r-(0.5*sigma^2)\n\nset.seed(1234)\n2. random number\nrnd.num <- as.data.frame(matrix(rnorm(s*interval), nrow=s, ncol=interval))\n\n3. 누적 수익률 만들기\nxx <- as.data.frame(matrix(data=0, nrow=s, ncol=interval+1))\nfor ( i in 1:s){ for ( j in 1:interval){\nxx[i,j+1] <- xx[i,j] + (mu*(T_t)+(sigma*sqrt(T_t)*rnd.num[i,j]))  \n}\n}\n4. t시점에서 option의 가치\nresult <- matrix(NA, s, 1)\n\nfor (i in 1:s){\n    result[i,1] <- (max(0, S0*exp(xx[i,151])-K*exp(-r*0.7),max(0, K*exp(-r*0.7)-S0*exp(xx[i,151]))))\n  \n}\n\n\npayoff <- result\nST <- matrix(S0*exp(xx[,150]))\nplot(ST, payoff)\n\n\nmean(result[1:s,1])\n\n\nplot(x=seq(1,500,1), y=xx[999, 2:501], type=\"l\", xlab = \"interval\", ylab = \"Yield\", main = \"999th Stock Price\")\nplot(x <- sort(rnorm(47)), type = \"s\", main = \"plot(x, type = \\\"s\\\")\")\npoints(x, cex = .5, col = \"dark red\")\n5. 블랙숄즈 공식과 비교, t시점에서 option의 가치\nchooser_option <- function(s, k, r, T, t, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  d1_c <- (log(s/k)+(r+0.5*sigma^2)*t)/(sigma*sqrt(t))\n  d2_c <- d1_c-sigma*sqrt(t)\n  value <- s*pnorm(d1)-k*exp(-r*T)*pnorm(d2)-s*pnorm(-d1_c)+k*exp(-r*T)*pnorm(-d2_c)\n  return(value)\n}\n\nchooser_option(100, 100, 0.03, 1, 0.3, 0.2)\n참고: call\ncalloption <- function(s, k, r, T, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  value <- s*pnorm(d1)-k*exp(-r*T)*pnorm(d2)\n  return(value)\n  \n}\n\ncalloption(100, 100, 0.03, 1, 0.2)\n참고: put\nputoption <- function(s, k, r, T, sigma){\n  d1 <- (log(s/k)+(r+0.5*sigma^2)*T)/(sigma*sqrt(T))\n  d2 <- d1-sigma*sqrt(T)\n  value <- k*exp(-r*T)*pnorm(-d2)-s*pnorm(-d1)\n  return(value)\n  \n}\n\nputoption(100, 100, 0.03, 1, 0.2)\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-10T13:25:54+00:00",
    "input_file": "first-writing.utf8.md"
  },
  {
    "path": "posts/2021-03-07-lec2/",
    "title": "ggplot2",
    "description": "응용통계학 lec2",
    "author": [
      {
        "name": "hanbyeol",
        "url": {}
      }
    ],
    "date": "2021-03-07",
    "categories": [],
    "contents": "\n5가지 중요한 dplyr\n1. filter(): 특정 조건을 만족하는 것을 필터링\n    penguins %>%\n        filter(species==\"Chinstrap\")\n- and 조건\n    penguins %>%\n        filter(species==\"Chinstrap\",island==\"Dream\")\n        \n- logical operator쓰면\n    penguins %>% \n        filter((species==\"Chinstrap\"|species==\"Adelie\")&island==\"dream\")\n- or조건\n    penguins %>%\n        filter(species %in% c(\"Chinstrap\",\"Adelie\"))\n    penguins %>%\n        filter(species %in% c(\"Chinstrap\",\"Adelie\"),island==\"dream\")\n- Q.Adelie이거나 Gentoo이면서 bill lenth가 30에서 100 사이인 것은?\nA.filter사용시\n    penguins %>% \n        filter(species %in% c(\"Adelie\",\"Gentoo\"),\n               bill_length_mm>30 & bill_length_mm<100) %>% \n        nrow()\n2. select(): column을 기준으로하는 operator\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        head()\n- 해당 열(species)을 제외하고 선택해줘\n    penguins %>% \n        select(-species) %>% \n        head()\n- 여러개의 연속적인 열을 선택해줘\n    penguins %>% \n        select(bill_length_mm:body_mass_g)\n- 특정조건을 만족시키는 열을 선택해줘\n    penguins %>% \n        select(ends_with(\"mm\")) %>% \n        names()\n- 내가 선택한 순서대로 선택해줘(선택한것빼고 나머지st)\n    penguins %>% \n        select(island,bill_length_mm,everything()) %>% \n        head()\n3. mutate(): 새로운 변수를 만들어 열을 추가 할 때\n   penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        mutate(bill_total=bill_length_mm + bill_depth_mm) %>% \n        head()\n- 새로 만든 변수를 바로 쓸수도 있다!\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        mutate(bill_total=bill_length_mm + bill_depth_mm,\n               bill_average=bill_total/2) %>% \n        head()\n- transmutate(): 새롭게 만든 변수만 선택하고 나머지는 버림\n    penguins %>% \n        select(species,bill_length_mm,bill_depth_mm) %>% \n        transmute(bill_total=bill_length_mm + bill_depth_mm,\n                  bill_average=bill_total/2) %>% \n        head()\n4. arrange(): data를 정렬하는 함수, 기본은 오름차순\n\npenguins %\\>%\n\nselect(species,bill_length_mm,bill_depth_mm) %\\>%\n\nmutate(bill_length_mm=ceiling(bill_length_mm),\n\nbill_depth_mm=ceiling(bill_depth_mm)) %\\>%\n\narrange(bill_length_mm)\n\n- bill_length_mm이 겹치면 bill_depth_mm으로 정렬하라\npenguins %\\>%\n\nselect(species,bill_length_mm,bill_depth_mm) %\\>%\n\nmutate(bill_length_mm=ceiling(bill_length_mm),\n\nbill_depth_mm=ceiling(bill_depth_mm)) %\\>%\n\narrange(bill_length_mm,bill_depth_mm)\n- bill_length_mm이 겹치면 bill_depth_mm으로 “내림차순”으로 정렬하라\npenguins %\\>%\n\nselect(species,bill_length_mm,bill_depth_mm) %\\>%\n\nmutate(bill_length_mm=ceiling(bill_length_mm),\n\nbill_depth_mm=ceiling(bill_depth_mm)) %\\>%\n\narrange(bill_length_mm,desc(bill_depth_mm))\n\n5. summarize(): 기존의 값으로 새로운 변수를 만들어서 요약해서 보여줌\npenguins %\\>%\n\nsummarise(bill_length_mean = mean(bill_length_mm, na.rm = TRUE),\n\nbill_depth_mean = mean(bill_depth_mm, na.rm = TRUE))\n\n- 그룹을 만들어서 새로운 변수를 만들고 요약해서 보여줌\npenguins %\\>%\n\ngroup_by(species) %\\>%\n\nsummarise(bill_depth_mean=mean(bill_depth_mm,na.rm=TRUE),\n\nbill_length_mean=mean(bill_length_mm,na.rm=TRUE))\n\n6. across(): 여러개의 column에 같은 함수를 적용할 때(cf.col별로 새로운 변수를 만들었음)\n- across가 없을 때\npenguins %>%\ngroup_by(species) %>%\nsummarise(bill_depth_mean=mean(bill_depth_mm,na.rm=TRUE),\nbill_length_mean=mean(bill_length_mm,na.rm=TRUE),\nflipper_length_mean=mean(flipper_length_mm,na.rm=TRUE)\n)\n- across를 사용하면\npenguins %>%\ngroup_by(species) %>%\nsummarise(across(bill_length_mm:flipper_length_mm,mean,na.rm=TRUE))\n\n\n\n",
    "preview": {},
    "last_modified": "2021-03-10T04:45:13+00:00",
    "input_file": {}
  }
]
